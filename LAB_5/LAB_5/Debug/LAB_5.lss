
LAB_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ec  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a0  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000399  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00001669  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000016bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 81 00 	call	0x102	; 0x102 <main>
  88:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
	sei();
}

void initADC(void){
	// Seleccion de Canal ADC (A)
	ADMUX = 6;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	80 83       	st	Z, r24
	
	// Utilizando AVCC = 5V internos
	ADMUX |= (1<<REFS0);
  98:	80 81       	ld	r24, Z
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9e:	80 81       	ld	r24, Z
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	80 83       	st	Z, r24
	
	// Justificacion a la Izquierda
	ADMUX |= (1<<ADLAR);
  a4:	80 81       	ld	r24, Z
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	
	// Habilitando el ADC
	ADCSRA |= (1<<ADEN);
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	
	//Habilitamos las interrupciones
	ADCSRA |= (1<<ADIE);
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
	
	// Habilitamos el Prescaler de 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
	
	DIDR0 |= (1<<ADC0D);
  c2:	ee e7       	ldi	r30, 0x7E	; 126
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <setup>:
		OCR2A = valorADC2;
    }
}

void setup(void){
	cli();
  ce:	f8 94       	cli
	
	DDRB |= (1<<DDB3);
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	84 b9       	out	0x04, r24	; 4
	
	//TIMER 2
	TCCR2A = 0;
  d6:	a0 eb       	ldi	r26, 0xB0	; 176
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	1c 92       	st	X, r1
	TCCR2B = 0;
  dc:	e1 eb       	ldi	r30, 0xB1	; 177
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
	
	TCCR2A |= (1<<COM2A1);	//NO INVERTIDO
  e2:	8c 91       	ld	r24, X
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	8c 93       	st	X, r24
	TCCR2A |= (1<<WGM21)|(1<<WGM20);	//MODO FAST
  e8:	8c 91       	ld	r24, X
  ea:	83 60       	ori	r24, 0x03	; 3
  ec:	8c 93       	st	X, r24
	
	TCCR2B &= ~(1<<WGM22);	//
  ee:	80 81       	ld	r24, Z
  f0:	87 7f       	andi	r24, 0xF7	; 247
  f2:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);	//PRESCALER DE 1024
  f4:	80 81       	ld	r24, Z
  f6:	87 60       	ori	r24, 0x07	; 7
  f8:	80 83       	st	Z, r24

	initADC();
  fa:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	
	sei();
  fe:	78 94       	sei
 100:	08 95       	ret

00000102 <main>:
uint8_t valorADC2;


int main(void)
{
    setup();
 102:	0e 94 67 00 	call	0xce	; 0xce <setup>
	ADCSRA |= (1<<ADSC);
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	80 83       	st	Z, r24
	
    while (1){
		OCR2A = valorADC2;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 114:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 118:	fb cf       	rjmp	.-10     	; 0x110 <main+0xe>

0000011a <__vector_21>:
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
	
	DIDR0 |= (1<<ADC0D);
}

ISR(ADC_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
	valorADC2 = ADCH;
 12a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 12e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	
	ADCSRA |= (1<<ADIF);
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 13c:	80 81       	ld	r24, Z
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	80 83       	st	Z, r24

 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
