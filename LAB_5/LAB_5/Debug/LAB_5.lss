
LAB_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007db  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d8  00000000  00000000  00000a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a0  00000000  00000000  000010ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dd  00000000  00000000  000017d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  78:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <map>:
		 _delay_ms(100); // Delay for servo to reach position
	 }
 }

 uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
 {
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
	 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  84:	fc 01       	movw	r30, r24
  86:	e6 1b       	sub	r30, r22
  88:	f7 0b       	sbc	r31, r23
  8a:	02 1b       	sub	r16, r18
  8c:	13 0b       	sbc	r17, r19
  8e:	e0 9f       	mul	r30, r16
  90:	c0 01       	movw	r24, r0
  92:	e1 9f       	mul	r30, r17
  94:	90 0d       	add	r25, r0
  96:	f0 9f       	mul	r31, r16
  98:	90 0d       	add	r25, r0
  9a:	11 24       	eor	r1, r1
  9c:	fa 01       	movw	r30, r20
  9e:	e6 1b       	sub	r30, r22
  a0:	f7 0b       	sbc	r31, r23
  a2:	bf 01       	movw	r22, r30
  a4:	0e 94 99 00 	call	0x132	; 0x132 <__udivmodhi4>
 }
  a8:	c9 01       	movw	r24, r18
  aa:	86 0f       	add	r24, r22
  ac:	97 1f       	adc	r25, r23
  ae:	1f 91       	pop	r17
  b0:	0f 91       	pop	r16
  b2:	08 95       	ret

000000b4 <main>:

 uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max);

 int main(void)
 {
	 DDRB |= (1<<PB1); // Set PB1 as output
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	84 b9       	out	0x04, r24	; 4

	 ADMUX |= (1<<REFS0) | (1<<MUX0); // Set reference voltage to AVCC and select ADC1 as input
  ba:	ec e7       	ldi	r30, 0x7C	; 124
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	81 64       	ori	r24, 0x41	; 65
  c2:	80 83       	st	Z, r24
	 ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1); // Enable ADC and set prescaler to 64
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	86 68       	ori	r24, 0x86	; 134
  cc:	80 83       	st	Z, r24

	 TCCR1A |= (1<<COM1A1) | (1<<WGM11); // Fast PWM, non-inverting mode
  ce:	e0 e8       	ldi	r30, 0x80	; 128
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 68       	ori	r24, 0x82	; 130
  d6:	80 83       	st	Z, r24
	 TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11); // Fast PWM, prescaler = 8
  d8:	e1 e8       	ldi	r30, 0x81	; 129
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8a 61       	ori	r24, 0x1A	; 26
  e0:	80 83       	st	Z, r24
	 ICR1=39999;   //20ms PWM period
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	9c e9       	ldi	r25, 0x9C	; 156
  e6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  ea:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	 while (1){
		 ADCSRA |= (1<<ADSC); // Start ADC conversion
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
		 while (ADCSRA & (1<<ADSC)); // Wait for conversion to complete
  f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fc:	86 fd       	sbrc	r24, 6
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <main+0x44>
		 uint16_t pot_val = ADC; // Read ADC result
 100:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 104:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		 uint16_t servo_pos = map(pot_val, 0, 1023, SERVO_MIN_POS, SERVO_MAX_POS); // Map pot_val to servo position
 108:	0f e9       	ldi	r16, 0x9F	; 159
 10a:	1f e0       	ldi	r17, 0x0F	; 15
 10c:	2f ec       	ldi	r18, 0xCF	; 207
 10e:	37 e0       	ldi	r19, 0x07	; 7
 110:	4f ef       	ldi	r20, 0xFF	; 255
 112:	53 e0       	ldi	r21, 0x03	; 3
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	0e 94 40 00 	call	0x80	; 0x80 <map>
		 OCR1A = servo_pos;
 11c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 120:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	87 ea       	ldi	r24, 0xA7	; 167
 126:	91 e6       	ldi	r25, 0x61	; 97
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x74>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x7a>
 12e:	00 00       	nop
 130:	de cf       	rjmp	.-68     	; 0xee <main+0x3a>

00000132 <__udivmodhi4>:
 132:	aa 1b       	sub	r26, r26
 134:	bb 1b       	sub	r27, r27
 136:	51 e1       	ldi	r21, 0x11	; 17
 138:	07 c0       	rjmp	.+14     	; 0x148 <__udivmodhi4_ep>

0000013a <__udivmodhi4_loop>:
 13a:	aa 1f       	adc	r26, r26
 13c:	bb 1f       	adc	r27, r27
 13e:	a6 17       	cp	r26, r22
 140:	b7 07       	cpc	r27, r23
 142:	10 f0       	brcs	.+4      	; 0x148 <__udivmodhi4_ep>
 144:	a6 1b       	sub	r26, r22
 146:	b7 0b       	sbc	r27, r23

00000148 <__udivmodhi4_ep>:
 148:	88 1f       	adc	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	5a 95       	dec	r21
 14e:	a9 f7       	brne	.-22     	; 0x13a <__udivmodhi4_loop>
 150:	80 95       	com	r24
 152:	90 95       	com	r25
 154:	bc 01       	movw	r22, r24
 156:	cd 01       	movw	r24, r26
 158:	08 95       	ret

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
